#!/bin/bash

cd "$(dirname "$0")" || exit 1  # move to script directory

OUTPUT=../global-config/pdns-recursor/forward-zones.conf
OUTPUT_DNSSEC=../global-config/pdns-recursor/recursor.lua
NSERVER_SEPARATOR=","
REGISTRY_ROOT=../dn42-registry/data

# hardcoded zones ðŸ™ˆ
# It might be better to parse these from icvpn-meta but these are updated pretty infrequently anyways
declare -A HARDCODED_ZONES
# https://github.com/freifunk/icvpn-meta/blob/master/rzl
HARDCODED_ZONES["rzl"]="172.22.36.1"
# https://github.com/freifunk/icvpn-meta/blob/master/chaosvpn
HARDCODED_ZONES["hack"]="172.31.0.5,172.31.255.53"

# PTR zones are manually mapped for now
declare -A ptr_zones
ptr_zones["20.172.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/172.20.0.0_16"
ptr_zones["21.172.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/172.21.0.0_16"
ptr_zones["22.172.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/172.22.0.0_16"
ptr_zones["23.172.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/172.23.0.0_16"
ptr_zones["31.172.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/172.31.0.0_16"
ptr_zones["127.10.in-addr.arpa"]="$REGISTRY_ROOT/inetnum/10.127.0.0_16"
ptr_zones["d.f.ip6.arpa"]="$REGISTRY_ROOT/inet6num/fd00::_8"

addrtype() {
    if [[ "$1" == *.* ]]; then
        echo 4
    elif [[ "$1" == *:* ]]; then
        echo 6
    fi
}

# Read nameserver IPs for the dn42 delegation servers (and other manually defined entries)
declare -A nserver_ips
echo "Read these delegation servers:" 1>&2
while IFS=" " read -r name ip; do
    echo "$name $ip" 1>&2
    nserver_ips["$name,$(addrtype "$ip")"]="$ip"
done < <(sed -n -E 's/^nserver:\s+([a-z]\.delegation-servers\.dn42) ([a-f0-9.:]+)$/\1 \2/p' $REGISTRY_ROOT/dns/delegation-servers.dn42)
echo 1>&2

parse_nserver() {
    if [[ -v nserver_ips["$nserver,4"] && -v nserver_ips["$nserver,6"] ]]; then
        echo "${nserver_ips["$nserver,4"]}${NSERVER_SEPARATOR}${nserver_ips["$nserver,6"]}"
        return;
    elif [[ -v nserver_ips["$nserver,6"] ]]; then
        echo "${nserver_ips["$nserver,6"]}"
        return;
    fi

    # HACK: unwrap registry-sync.dn42 entries. Unfortunately pdns-recursor doesn't support using hostnames as targets in forward-zones
    if [[ "$nserver" == *".ipv6.registry-sync.dn42" ]]; then
        # e.g. "0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3.5.0.0.f.f.f.f.7.2.1.0.0.1.d.f.ipv6.registry-sync.dn42"
        echo "$nserver" | sed 's/\.ipv6\.registry-sync\.dn42$//' | rev | sed -E -e 's/([0-9a-f])\.([0-9a-f])\.([0-9a-f])\.([0-9a-f])/\1\2\3\4/g' -e 's/\./:/g'
    elif [[ "$nserver" == *".ipv4.registry-sync.dn42" ]]; then
        # e.g. "53.255.127.10.ipv4.registry-sync.dn42"
        echo "$nserver" | sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\.ipv4\.registry-sync\.dn42$/\4.\3.\2.\1/'
    fi
}

write_nservers() {
    zone_entry="$1"
    zone_name="$2"

    parsed_nservers=()
    raw_nservers="$(sed -n -E 's/^nserver:\s+(.+)$/\1/p' "$zone_entry")"
    while read -r nserver; do
        parsed_nserver="$(parse_nserver "$nserver")"
        if [[ -n "$parsed_nserver" ]]; then
            parsed_nservers+=("$parsed_nserver")
        fi
    done <<< "$raw_nservers"

    if [[ -n "${HARDCODED_ZONES["$zone_name"]}" ]]; then
        echo "$zone_name=${HARDCODED_ZONES["$zone_name"]}" | tee -a "$OUTPUT"
    elif (( ${#parsed_nservers[@]} )); then
        IFS="${NSERVER_SEPARATOR}" nservers_flat="${parsed_nservers[*]}"
        echo "$zone_name=$nservers_flat" | tee -a "$OUTPUT"
    else
        echo "!!! Unknown nameservers for zone $zone_name:" 1>&2
        echo "$raw_nservers" 1>&2
        echo "!!!" 1>&2
    fi
}

write_dnssec() {
    zone_entry="$1"
    zone_name="$2"

    dnssec_tas=()
    while IFS= read -r rdata; do
        dnssec_tas+=("$rdata");
    done < <( sed -n -E 's/^ds-rdata:\s+(.+)$/\1/p' "$zone_entry" )

    if (( ${#dnssec_tas[@]} )); then
        for ta in "${dnssec_tas[@]}"; do
            echo "addTA(\"${zone_name}\", \"$ta\")" >> "$OUTPUT_DNSSEC"
        done
    else
        echo "addNTA(\"${zone_name}\", \"No known trust anchors for zone $zone_name\")" >> "$OUTPUT_DNSSEC"
    fi
}

shopt -s extglob
echo "# Generated by $0" > "$OUTPUT"
cat > "$OUTPUT_DNSSEC" <<EOF
-- Generated by $0
-- Disable automatic reloading of distro-provided DNS zones, this seems to overwrite the dn42 trust anchors?
readTrustAnchorsFromFile("/usr/share/dns/root.key", 0)

EOF

# Assume all single-word entries in dns/ are TLDs
for zone_entry in "$REGISTRY_ROOT/dns/"!(*.*); do
    write_nservers "$zone_entry" "$(basename "$zone_entry")"
    write_dnssec "$zone_entry" "$(basename "$zone_entry")"
done

for zonename in "${!ptr_zones[@]}"; do
    write_nservers "${ptr_zones["$zonename"]}" "$zonename"
    write_dnssec "${ptr_zones["$zonename"]}" "$zonename"
done
