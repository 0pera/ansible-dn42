#!/usr/bin/env python3
"""
Enumerate intra-AS tunnel settings for AS4242421080. This script generates a list of intra-AS
neighbours for each node (mesh and non-mesh), as well as which Wireguard ports to connect to.
This was split from the Ansible playbook to allow for more flexibility.
"""
import os
import pprint

from _common import *

OUTFILE = "global-config/igp-tunnels.yml"
START_PORT = 30000  # Port to start building tunnels from

def _read_previous_settings():
    if os.path.exists(OUTFILE):
        with open(OUTFILE) as f:
            data = yaml.safe_load(f.read())
            return data
    else:  # Default template
        return {
            'next_port': START_PORT,
            'igp_neighbours': {},
            'igp_wg_ports': {},
        }

def _add_tunnel(data, server1, server2):
    """
    Add a link between server1 and server2, and assign a new VPN port for this pair
    if one does not already exist.
    """
    if server1 == server2:
        raise ValueError("cannot link a server to itself")
    neighbours1 = data['igp_neighbours'].setdefault(server1, set())
    neighbours2 = data['igp_neighbours'].setdefault(server2, set())
    neighbours1.add(server2)
    neighbours2.add(server1)

    wg_ports1 = data['igp_wg_ports'].setdefault(server1, {})
    wg_ports2 = data['igp_wg_ports'].setdefault(server2, {})
    next_port = data['next_port']
    if server2 in wg_ports1:  # a port is already assigned; skip
        return
    wg_ports1[server2] = next_port
    wg_ports2[server1] = next_port

    data['next_port'] += 1

def main():
    data = _read_previous_settings()
    hosts = yaml_load('hosts.yml')

    dn42routers = get_hosts(hosts, include_private=True)
    # Between runs, the desired list of neighbours for a node can change, so we clear it here and rewrite it.
    # VPN port allocations however do stick around even as links are removed, in order to ensure stability.
    data['igp_neighbours'].clear()

    for server1, serverdata in dn42routers.items():
        if not serverdata.get('auto_tunnels', True):
            continue
        # For leaf servers, add all nodes specified in igp_upstreams
        igp_upstreams = set(serverdata.get('igp_upstreams', []))

        for server2 in igp_upstreams:
            _add_tunnel(data, server1, server2)

    for server1, serverdata in dn42routers.items():
        # Sanity check: all iBGP RR upstreams should be direct neighbours
        ibgp_upstreams = set(serverdata.get('ibgp_rr_upstreams', {}))
        ibgp_not_direct = ibgp_upstreams - data['igp_neighbours'].get(server1, set())
        if ibgp_not_direct:
            print(f'WARNING: {server1} defines ibgp_rr_upstreams not in neighbours: {ibgp_not_direct}')

    pprint.pprint(data)
    with open(OUTFILE, 'w', encoding='utf8') as f:
        f.write(f'# Generated by {os.path.basename(__file__)}, do not edit!\n')
        f.write(yaml.safe_dump(data))

if __name__ == '__main__':
    main()
