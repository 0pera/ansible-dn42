# Custom filters for AS4242421080

function read_bgp_blackhole() {
    # Implement BLACKHOLE community as defined by RFC 7999
    # Based off https://bird.network.cz/pipermail/bird-users/2016-October/010705.html
    if (source = RTS_BGP && (65535, 666) ~ bgp_community) then {
        dest = RTD_BLACKHOLE;
    }
}

function prefer_same_region_origin(int base_weight) {
    # Prefer routes originating from the same region
    # This is basically cold-potato routing, where we prefer routing traffic through
    # our network and only exiting at the border router closest to the destination network.
    if ((64511, DN42_REGION) ~ bgp_community) then {
        bgp_local_pref = bgp_local_pref + base_weight/bgp_path.len;
    } else {
        # Treat North America - Central and East as the same region. These regions are only ~20 ms apart
        # so forcing traffic to either single one is often counterproductive.
        if (DN42_REGION ~ [42..43] && bgp_community ~ [(64511, 42..43)]) then {
            bgp_local_pref = bgp_local_pref + base_weight/bgp_path.len;
        }

    }
}

# Special cases I've added for route optimization, your mileage may vary
function handle_special_cases() {
    # Pin the following to DE:
    # - AS4242420101 / CCCDA        - hackint IRC
    if (NODEID = 117 && bgp_path.last ~ [4242420101]) then {
        bgp_local_pref = bgp_local_pref + 25;
    }
    # 2020-12-29: reject long flapping AS (ICVPN-BODENSEE)
    if (bgp_path.last = 64875) then {
        reject;
    }
}

# Subtract x from bgp_local_pref, while checking for underflow
function safe_lower_pref(int x) {
    if (bgp_local_pref > x) then {
        bgp_local_pref = bgp_local_pref - x;
    } else {
        bgp_local_pref = 0;
    }
}

function ebgp_import_filter() {
    handle_special_cases();

    # Apply same region filtering on routes which specify the dn42 community tags
    if (bgp_community ~ [(64511, 41..53)]) then {
        prefer_same_region_origin(200);
    } else {
        # Some peers attach region communities to routes in transit, which screws up calculations
        # for prefixes where some paths have a region and others don't.
        # In these cases just weigh local_pref based on AS path length.
        bgp_local_pref = bgp_local_pref + 200/bgp_path.len;
    }
    read_bgp_blackhole();
    # Penalize links with high (>20ms) latency (generated by Ansible)
{# XXX: this is ugly but I don't think Bird allows extracting community values into variables #}
{% for num in range(4, 10) %}
    if ((64511, {{ num }}) ~ bgp_community) then {
        safe_lower_pref({{num * 3}});
    }
{% endfor %}
    # Informational communities: region of import & node ID of import
    bgp_large_community.add((OWNAS, 101, DN42_REGION));
    bgp_large_community.add((OWNAS, 103, NODEID));
};

function ebgp_export_filter() {
};
