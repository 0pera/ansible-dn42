# Custom filters for AS4242421080

function read_bgp_blackhole() {
    # Implement BLACKHOLE community as defined by RFC 7999
    # Based off https://bird.network.cz/pipermail/bird-users/2016-October/010705.html
    if (source = RTS_BGP && (65535, 666) ~ bgp_community) then {
        print "Adding blackhole route for ", net, " (RFC7999); source=", bgp_path.last;
        dest = RTD_BLACKHOLE;
    }
}

function prefer_same_region_origin(int base_weight) {
    # Prefer routes originating from the same region
    # This is basically cold-potato routing, where we prefer routing traffic through
    # our network and only exiting at the border router closest to the destination network.
    if ((64511, DN42_REGION) ~ bgp_community) then {
        bgp_local_pref = bgp_local_pref + base_weight/bgp_path.len;
    } else {
        # Treat all of North America as one region
        if (DN42_REGION ~ [42..44] && bgp_community ~ [(64511, 42..44)]) then {
            bgp_local_pref = bgp_local_pref + base_weight/bgp_path.len;
        }
    }
}

function get_lc_region_tag() {
    # Write a community value stating which region the route was learned
    # 1 = North America
    # 2 = Europe
    if (DN42_REGION ~ [42..44]) then {
        return 1;
    }
    if (DN42_REGION = 41) then {
        return 2;
    }
    return 0;
}

function ebgp_import_filter() {
    # Only apply same region filtering on inputs that specify the dn42 community tags
    if (bgp_community ~ [(64511, 41..53)]) then {
        prefer_same_region_origin(200);
    } else {
        # Some peers attach region communities to routes in transit, which screws up calculations
        # for prefixes where some paths have a region and others don't.
        # In these cases just weigh local_pref based on AS path length.
        bgp_local_pref = bgp_local_pref + 200/bgp_path.len;
    }
    read_bgp_blackhole();
    if (get_lc_region_tag() > 0) then {
        bgp_large_community.add((OWNAS, 100, get_lc_region_tag()));
    }
};

function ebgp_export_filter() {
};
