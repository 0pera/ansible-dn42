<!DOCTYPE html>
<html>
<head>
    <title>Routestats for {{ inventory_hostname }} - highdef.network</title>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <style>
nav {
    max-width: 900px;
    margin: auto;
}
.container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    max-width: 960px;
}
    </style>
    <link href="/style.css" rel="stylesheet">
    <script type="text/javascript">

google.charts.load("current", {packages:["corechart"]});
google.charts.setOnLoadCallback(drawCharts);

const CHART_TEXT_STYLE = {color: "#eee"};
const CHART_WIDTH = 800;
const CHART_HEIGHT = 500;
async function drawPieChart(dataTable, title, chartElement, slices) {
    const options = {
        title: title,
        is3D: true,
        sliceVisibilityThreshold: 0.01,
        slices: slices,
        width: CHART_WIDTH,
        height: CHART_HEIGHT,

        // options to better match dark theme
        pieResidueSliceColor: "#aaa", // colour of "other" slice
        backgroundColor: {fill: "transparent"},
        legend: {
            textStyle: CHART_TEXT_STYLE,
            // undocumented!!!! https://groups.google.com/g/google-visualization-api/c/zoK5FKV83YQ
            pagingTextStyle: CHART_TEXT_STYLE,
            scrollArrows: {
                activeColor: "#4257f5",
            }
        },
        titleTextStyle: CHART_TEXT_STYLE,

    };
    const chart = new google.visualization.PieChart(chartElement);
    chart.draw(dataTable, options);
}
async function drawBarChart(dataTable, title, chartElement) {
    const options = {
        title: title,
        width: CHART_WIDTH,
        height: CHART_HEIGHT,
        backgroundColor: {fill: "transparent"},

        // options to better match dark theme
        titleTextStyle: CHART_TEXT_STYLE,
        hAxis: {
            titleTextStyle: CHART_TEXT_STYLE,
            textStyle: CHART_TEXT_STYLE,
        },
        vAxis: {
            titleTextStyle: CHART_TEXT_STYLE,
            textStyle: CHART_TEXT_STYLE,
        },
        legend: {
            position: 'none',
        }
    };
    const chart = new google.visualization.BarChart(chartElement);
    chart.draw(dataTable, options);
}

async function drawChart(data, dataEntry, title, chartType) {
    const dataTable = google.visualization.arrayToDataTable(
        [['Key', 'Amount']].concat(data[dataEntry]));

    const slices = [];
    const igp_links_key = `${dataEntry}_igp_links`;
    if (data[igp_links_key] != null) {
        data[igp_links_key].forEach((idx) => {
            slices[idx] = {offset: 0.1};
        } );
    }
    chartElement = document.getElementById(`chart_${dataEntry}`);
    if (chartType === "bar") {
        await drawBarChart(dataTable, title, chartElement);
    } else {
        await drawPieChart(dataTable, title, chartElement, slices);
    }
}

async function drawCharts() {
    let ok = true;
    let info = document.getElementById("info");
    let data = await fetch("routestats.json").then(resp => {
        if (resp.status === 200) {
            return resp.json();
        }
        ok = false;
    });

    if (!ok) {
        info.innerText = "Error loading routestats.json";
        return;
    }
    let ts = new Date(data['ts']*1000);
    info.innerText = `Last update: ${ts.toUTCString()}`;

    await drawChart(data, "ipv4", `# of preferred routes by BIRD session (IPv4) - ${data['ipv4_total']} total`);
    await drawChart(data, "ipv6", `# of preferred routes by BIRD session (IPv6) - ${data['ipv6_total']} total`);
    await drawChart(data, "ipv4_asns", `# of destination ASNs by BIRD session (IPv4)`);
    await drawChart(data, "ipv6_asns", `# of destination ASNs by BIRD session (IPv6)`);
    await drawChart(data, "ipv4_path_len_for_prefix", `BGP path len per prefix (IPv4) - ${data['ipv4_total']} total`, 'bar');
    await drawChart(data, "ipv6_path_len_for_prefix", `BGP path len per prefix (IPv6) - ${data['ipv6_total']} total`, 'bar');
}
    </script>
</head>

<body>
    <h1>Routestats for {{ inventory_hostname }}</h1>
    <nav>
    <a href="/">Home</a>
    <br>
    Other servers:
{% for server in groups['dn42routers'] %}
{% if server == inventory_hostname %}
    <b>{{ server }}</b>
{% else %}
    <a href="//{{ server + dns_auto_host_record_suffix + '.' + dns_domain }}/routestats/">{{ server }}</a>
{% endif %}
{% endfor %}
    </nav>
    <p id="info" class="largefont"><noscript>JavaScript is required for this site to work.</noscript></p>
    <div class="container">
        <div id="chart_ipv4" class="chart"></div>
        <div id="chart_ipv6" class="chart"></div>
        <div id="chart_ipv4_asns" class="chart"></div>
        <div id="chart_ipv6_asns" class="chart"></div>
        <div id="chart_ipv4_path_len_for_prefix" class="chart"></div>
        <div id="chart_ipv6_path_len_for_prefix" class="chart"></div>
    </div>
</body>
</html>
