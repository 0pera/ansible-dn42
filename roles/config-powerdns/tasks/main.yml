
## GeoIP prereqs
- name: Download GeoIP database from db-ip.com
  get_url:
    url: https://download.db-ip.com/free/dbip-country-lite-{{ ansible_date_time.year }}-{{ ansible_date_time.month }}.mmdb.gz
    dest: "{{ automation_root_dir }}/dbip-country-lite.mmdb.gz"
    mode: '0644'
  when: serve_clearnet_dns|default(False)
  ignore_errors: true

- name: Extract GeoIP database
  command: "gunzip -k dbip-country-lite.mmdb.gz"
  args:
    chdir: "{{ automation_root_dir }}"
    creates: "{{ automation_root_dir }}/dbip-country-lite.mmdb"
  when: serve_clearnet_dns|default(False)

## Build PowerDNS config
- name: "Build PowerDNS config variables"
  set_fact:
    _pdns_bind_dnssec_db: "{{ pdns_secondary_zones_dir }}/dnssec.db"
    _pdns_local_address: "{{ (dummy_interfaces.anycast_auth_dns.ip4 + dummy_interfaces.anycast_auth_dns.ip6) }}"

- name: "Build PowerDNS BIND backend config"
  set_fact:
    _pdns_backends:
      bind: &bind_backend_config
        config: "/etc/powerdns/named.conf"
        dnssec-db: "{{ _pdns_bind_dnssec_db }}"

## Clearnet auth-DNS servers enable GeoIP and have additional bind IPs
- name: "Build PowerDNS GeoIP backend config"
  set_fact:
    _pdns_local_address: "{{ _pdns_local_address
                             + ([ansible_default_ipv4.get('address', 0), ansible_default_ipv6.get('address', 0)]
                                | select('string')) }}"
    _pdns_backends:
      bind:
        <<: *bind_backend_config
      geoip:
        zones-file: "/etc/powerdns/geodns.yml"
        database-files: "{{ automation_root_dir }}/dbip-country-lite.mmdb"
  when: serve_clearnet_dns|default(False)

- name: "Create PowerDNS config folder"
  file:
    path: "/etc/powerdns"
    state: directory

## Create a writeable data dir for receiving secondary zones from *.master.delegation-servers.dn42
- name: "Create PowerDNS secondary zones folder"
  file:
    path: "{{ pdns_secondary_zones_dir }}/"
    state: directory
    owner: pdns
    group: pdns
    mode: '0755'

- name: "Create DNSSEC DB for PowerDNS secondary zones"
  command:
    cmd: pdnsutil create-bind-db {{ _pdns_bind_dnssec_db }}
    creates: "{{ _pdns_bind_dnssec_db }}"
  become_user: pdns
  notify:
    - Reconfigure PowerDNS

- name: "Upload geodns.yml for PowerDNS"
  copy:
    src: "{{ playbook_dir }}/geodns.yml"
    dest: "/etc/powerdns/geodns.yml"
    mode: '0644'
  notify:
    - Reconfigure PowerDNS
  when: serve_clearnet_dns|default(False)

- name: "Template named.conf for PowerDNS"
  template:
    src: "named.conf.j2"
    dest: "/etc/powerdns/named.conf"
    mode: '0644'
  notify:
    - Reconfigure PowerDNS

- import_role:
    name: PowerDNS.pdns
  vars:
    # Debian 11 / PowerDNS 4.4.x
    pdns_install_repo: ""
    #pdns_install_repo: "{{ pdns_auth_powerdns_repo_43 if ansible_distribution_release == 'buster' else '' }}"
    pdns_config:
      local-address: "{{ _pdns_local_address | join(', ') }}"
      slave: "{{ dns_dn42_secondary_zones is defined | bool }}"
      allow-notify-from: "{{ dns_dn42_primary_servers | join(', ') }}"
      allow-axfr-ips: "172.20.0.0/14, 10.0.0.0/8, 172.31.0.0/16, fd00::/8"
    pdns_backends: "{{ _pdns_backends }}"
    pdns_service_overrides:
      # Work around errors described at https://github.com/PowerDNS/pdns_recursor-ansible/issues/69
      User: "{{ pdns_user }}"
      Group: "{{ pdns_group }}"
      # Start/stop
      ExecStartPre: "+ifup {{ dummy_interfaces.anycast_auth_dns.ifname }} --force"
      ExecStopPost: "+ip link del {{ dummy_interfaces.anycast_auth_dns.ifname }}"
      # For secondary zone DBs
      ReadWritePaths: "{{ pdns_secondary_zones_dir }}"

- name: "Synchronize DNS zones"
  synchronize:
    src: "{{ playbook_dir }}/global-config/dns-zones/"
    dest: "{{ dns_zones_dir }}"
    checksum: true
    archive: false
    delete: true
    recursive: true
  notify:
    - Reconfigure PowerDNS
